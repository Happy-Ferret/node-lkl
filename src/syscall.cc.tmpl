extern "C" {
	#include <lkl.h>
	#include <lkl_host.h>
}

#include "zsyscall.h"

{{#each syscalls}}
// MACHINE GENERATED; DO NOT EDIT

class {{name}}Worker : public Nan::AsyncWorker {
	public:
		{{name}}Worker(Nan::NAN_METHOD_ARGS_TYPE info, Nan::Callback *callback,
		{{~#each inp~}}
			{{~#switch type~}}
				{{~#case "int"~}}int {{name}}{{/case}}
				{{~#case "int64"~}}int {{name}}{{/case}}
				{{~#case "uint32"~}}uint {{name}}{{/case}}
				{{~#case "string"~}}char *{{name}}{{/case}}
				{{~#case "[]byte"~}}void *{{name}}, int {{name}}_len{{/case}}
			{{~/switch~}}
			{{~#unless @last~}}, {{/unless}}
		{{~/each~}}
		)
		: Nan::AsyncWorker(callback),
		{{~#each inp}}
			{{~#switch type~}}
				{{~#case "int"~}}{{name}}({{name}}){{~/case~}}
				{{~#case "int64"~}}{{name}}({{name}}){{~/case~}}
				{{~#case "uint32"~}}{{name}}({{name}}){{~/case~}}
				{{~#case "string"~}}{{name}}({{name}}){{~/case~}}
				{{~#case "[]byte"~}}
					{{name}}({{name}}),
					{{name}}_len({{name}}_len)
				{{~/case~}}
			{{~/switch~}}
			{{~#unless @last}}, {{/unless}}
		{{~/each}}
		{
			{{#indent "			"}}
				{{#each inp}}
					{{#switch type}}
						{{#case "string"}}
							SaveToPersistent({{@index}}u, info[{{@index}}]);
						{{/case}}
						{{#case "[]byte"}}
							SaveToPersistent({{@index}}u, info[{{@index}}]);
						{{/case}}
					{{/switch}}
				{{/each}}
			{{/indent}}
		}

		~{{name}}Worker() {}

		void Execute () {
			ret = lkl_sys_{{name}}(
				{{~#each inp~}}
					{{~#switch type~}}
						{{~#case "int"~}}{{name}}{{/case}}
						{{~#case "int64"~}}{{name}}{{/case}}
						{{~#case "uint32"~}}{{name}}{{/case}}
						{{~#case "string"~}}{{name}}{{/case}}
						{{~#case "[]byte"~}}{{name}}, {{name}}_len{{/case}}
					{{~/switch~}}
					{{~#unless @last~}}, {{/unless}}
				{{~/each~}}
			);
		}

		void HandleOKCallback () {
			Nan::HandleScope scope;

			if (callback) {
				if (ret < 0) {
					v8::Local<v8::Value> argv[] = {
						Nan::New<v8::Number>(-ret)
					};
					callback->Call(1, argv);
				} else {
					v8::Local<v8::Value> argv[] = {
						Nan::Null(),
						Nan::New<v8::Number>(ret)
					};
					callback->Call(2, argv);
				}
			}
		}

	private:
		{{#indent "		"}}
			{{#each inp}}
				{{#switch type}}
					{{#case "int"}}
						int {{name}};
					{{/case}}
					{{#case "int64"}}
						int {{name}};
					{{/case}}
					{{#case "uint32"}}
						uint {{name}};
					{{/case}}
					{{#case "string"}}
						char *{{name}};
					{{/case}}
					{{#case "[]byte"}}
						void *{{name}};
						int {{name}}_len;
					{{/case}}
				{{/switch}}
			{{/each}}
						int ret;
		{{/indent}}
};

NAN_METHOD({{name}}) {
	if (info.Length() < {{inp.length}}) {
		Nan::ThrowTypeError("Wrong number of arguments");
		return;
	}

	{{#indent "	"}}
		{{#each inp}}
			{{#switch type}}
				{{#case "int"}}
					int {{name}} = info[{{@index}}]->Uint32Value();
				{{/case}}
				{{#case "int64"}}
					int {{name}} = info[{{@index}}]->Uint32Value();
				{{/case}}
				{{#case "uint32"}}
					uint {{name}} = info[{{@index}}]->Uint32Value();
				{{/case}}
				{{#case "string"}}
					Nan::Utf8String {{name}}(info[{{@index}}]);
				{{/case}}
				{{#case "[]byte"}}
					void *{{name}} = node::Buffer::Data(info[{{@index}}]->ToObject());
					int {{name}}_len = node::Buffer::Length(info[{{@index}}]->ToObject());
				{{/case}}
			{{/switch}}
		{{/each}}
	{{/indent}}

	if (info[{{inp.length}}]->IsFunction()) {
		Nan::Callback *callback = new Nan::Callback(info[{{inp.length}}].As<v8::Function>());
		Nan::AsyncQueueWorker(new {{name}}Worker(info, callback,
			{{~#each inp~}}
				{{~#switch type~}}
					{{~#case "int"~}}{{name}}{{/case}}
					{{~#case "int64"~}}{{name}}{{/case}}
					{{~#case "uint32"~}}{{name}}{{/case}}
					{{~#case "string"~}}*{{name}}{{/case}}
					{{~#case "[]byte"~}}{{name}}, {{name}}_len{{/case}}
				{{~/switch~}}
				{{~#unless @last~}}, {{/unless}}
			{{~/each~}}
		));
	} else {
		long ret = lkl_sys_{{name}}(
			{{~#each inp~}}
				{{~#switch type~}}
					{{~#case "int"~}}{{name}}{{/case}}
					{{~#case "int64"~}}{{name}}{{/case}}
					{{~#case "uint32"~}}{{name}}{{/case}}
					{{~#case "string"~}}*{{name}}{{/case}}
					{{~#case "[]byte"~}}{{name}}, {{name}}_len{{/case}}
				{{~/switch~}}
				{{~#unless @last~}}, {{/unless}}
			{{~/each~}}
		);

		if (ret < 0) {
			Nan::ThrowError(Nan::ErrnoException(-ret));
		} else {
			info.GetReturnValue().Set(Nan::New<v8::Number>(ret));
		}
	}
}

{{/each}}
